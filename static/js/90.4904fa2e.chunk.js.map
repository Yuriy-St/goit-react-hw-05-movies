{"version":3,"file":"static/js/90.4904fa2e.chunk.js","mappings":"4TAEMA,EAAW,+BAEXC,EAAa,CACjBC,SAAU,SAGNC,EAAc,CAClBC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAsB,WACjC,IAAMC,EAAG,UAAMT,EAAN,uBACT,OAAOU,EAAiB,CAAED,IAAAA,GAC3B,EAEYE,EAAiB,SAAAC,GAC5B,IAAMH,EAAG,UAAMT,EAAN,kBAAwBY,GACjC,OAAOF,EAAiB,CAAED,IAAAA,GAC3B,EAEYI,EAAoB,SAAAD,GAC/B,IAAMH,EAAG,UAAMT,EAAN,kBAAwBY,EAAxB,YACT,OAAOF,EAAiB,CAAED,IAAAA,GAC3B,EAEYK,EAAoB,SAAAF,GAC/B,IAAMH,EAAG,UAAMT,EAAN,kBAAwBY,EAAxB,YACT,OAAOF,EAAiB,CAAED,IAAAA,GAC3B,EAEYM,EAAe,SAAAC,GAC1B,IAAMP,EAAG,UAAMT,EAAN,iBAOT,OAAOU,EAAiB,CAAED,IAAAA,EAAKQ,OANhB,CACbD,MAAAA,EACAE,cAAe,QACfhB,SAAU,QACViB,KAAM,MAGT,EAEKT,EAAgB,mCAAG,wGAASD,EAAT,EAASA,IAAT,IAAcQ,OAAAA,OAAd,MAAuB,CAAC,EAAxB,EACjBG,EAAa,IAAIC,gBAEjBC,GAHiB,kBAIlBnB,GAJkB,IAKrBM,IAAAA,EACAQ,QAAO,kBAAMhB,GAAegB,GAC5BM,OAAQH,EAAWG,SAPE,mBAWEC,EAAAA,EAAAA,GAAMF,GAXR,UAYG,OADlBG,EAXe,QAYRC,OAZQ,sBAYcD,EAASE,KAZvB,gCAad,CAAEA,KAAMF,EAASE,KAAMP,WAAAA,IAbT,wCAiBrB,QAFQK,EAfa,KAebA,gBAER,IAAIA,GAAAA,EAAUE,KACZC,QAAQC,MAAMJ,EAASE,MAEvBC,QAAQC,MAAMJ,GAAQ,MAGlB,IAAIK,MAAM,8CAvBK,0DAAH,qD,wLC9CTC,EAAWC,EAAAA,EAAAA,GAAH,0JASRC,EAAWD,EAAAA,EAAAA,GAAH,iJAQRE,EAAeF,EAAAA,EAAAA,IAAH,+DAKZG,EAAQH,EAAAA,EAAAA,IAAH,sBAELI,EAAOJ,EAAAA,EAAAA,EAAH,oEAKJK,EAAYL,EAAAA,EAAAA,EAAH,+CAITM,EAAQN,EAAAA,EAAAA,IAAH,0F,0ECrBH,SAASO,IACtB,MCVkC,WAClC,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoCJ,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,wGAEjBN,GAAa,GAFI,UAGkB/B,EAAAA,EAAAA,IAAkBkC,GAHpC,uBAGTpB,EAHS,EAGTA,KAAMP,EAHG,EAGHA,WACdsB,EAAWf,GAJM,kBAKVP,GALU,kCAOjB0B,EAAc,KAAMK,SAPH,yBASjBP,GAAa,GATI,6EAAH,qDAaZQ,EAAkBF,IAExB,OAAO,WACU,OAAfE,QAAe,IAAfA,GAAmBA,EAAgBC,OACpC,CACF,GAAE,CAACN,IAEG,CAAEN,QAAAA,EAASE,UAAAA,EAAWE,WAAAA,EAC9B,CDlB4CS,GAAnCb,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,UAAWE,EAA5B,EAA4BA,WAEtBU,EAAI,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAASc,KAEtB,OACE,gCACGZ,IAAa,SAACa,EAAA,EAAD,KACT,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAME,QAAS,IACd,SAAC,EAAAC,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC5B,EAAD,UACGwB,EAAKK,KAAI,gBAAGhD,EAAH,EAAGA,GAAIiD,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,UAAC9B,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CACE6B,IACEF,EAAY,UAdf,kCAce,OACMA,GADN,UAELG,GAETC,IAAKL,EACLM,MAAM,MACNC,OAAO,WAIX,UAAC9B,EAAD,YACE,SAACF,EAAD,UAAOyB,KACP,UAACxB,EAAD,WAAW,cAAY0B,UAhBZnD,EADP,QAwBfiC,IAAc,uBAAIA,MAGxB,C,gFElDYwB,E,QAAkBrC,EAAAA,IAAH,8F,SCCb,SAASwB,IACtB,OACE,SAACa,EAAD,WACE,SAAC,KAAD,KAGL,C","sources":["api/themoviedb.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","hooks/useFetchMovieCredits.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst DEF_PARAMS = {\n  language: 'en-US',\n};\n\nconst DEF_OPTIONS = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YzIyMmVkMDdhYmIxYzBhZTdkZTZmNjcwNzc1MWYxMCIsInN1YiI6IjY0ZWM5NjI2NDU4MTk5MDBjNmY5N2ZmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.BJKeXT5Tv6NruFgOPeeGmw_mnuiGKgPxsTR813jGw0o',\n  },\n};\n\nexport const fetchTrendingMovies = () => {\n  const url = `${BASE_URL}/trending/movie/day`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieById = id => {\n  const url = `${BASE_URL}/movie/${id}`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieCredits = id => {\n  const url = `${BASE_URL}/movie/${id}/credits`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieReviews = id => {\n  const url = `${BASE_URL}/movie/${id}/reviews`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const searchMovies = query => {\n  const url = `${BASE_URL}/search/movie`;\n  const params = {\n    query,\n    include_adult: 'false',\n    language: 'en-US',\n    page: '1',\n  };\n  return tmdbProcessQuery({ url, params });\n};\n\nconst tmdbProcessQuery = async ({ url, params = {} }) => {\n  const controller = new AbortController();\n\n  const options = {\n    ...DEF_OPTIONS,\n    url,\n    params: { ...DEF_PARAMS, ...params },\n    signal: controller.signal,\n  };\n\n  try {\n    const response = await axios(options);\n    if (response.status !== 200) throw response.data;\n    return { data: response.data, controller };\n  } catch (err) {\n    const { response } = err;\n\n    if (response?.data) {\n      console.error(response.data);\n    } else {\n      console.error(response || err);\n    }\n\n    throw new Error('Something went wrong. Try reload the page.');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  padding-bottom: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  column-gap: 2rem;\n  row-gap: 3rem;\n`;\n\nexport const CastItem = styled.li`\n  width: 185px;\n  display: flex;\n  flex-direction: column;\n  // justify-content: space-between;\n  row-gap: 0.25rem;\n`;\n\nexport const PhotoWrapper = styled.div`\n  width: 185px;\n  min-height: 280px;\n`;\n\nexport const Photo = styled.img``;\n\nexport const Name = styled.p`\n  font-size: 1.25rem;\n  font-weight: 700;\n`;\n\nexport const Character = styled.p`\n  font-style: italic;\n`;\n\nexport const Thumb = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.25rem;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useFetchMovieCredits } from 'hooks/useFetchMovieCredits';\nimport {\n  CastItem,\n  CastList,\n  Character,\n  Name,\n  Photo,\n  PhotoWrapper,\n  Thumb,\n} from './Cast.styled';\nimport placeholder from 'images/avatar-placeholder.png';\nimport { Suspense } from 'react';\n\nexport default function Cast() {\n  const { credits, isLoading, fetchError } = useFetchMovieCredits();\n  const BASE_URL = 'http://image.tmdb.org/t/p/w185';\n  const cast = credits?.cast;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast?.length > 0 && (\n        <Suspense fallback={<div>Loading...</div>}>\n          <CastList>\n            {cast.map(({ id, name, profile_path, character }) => (\n              <CastItem key={id}>\n                <PhotoWrapper>\n                  <Photo\n                    src={\n                      profile_path\n                        ? `${BASE_URL}${profile_path}`\n                        : `${placeholder}`\n                    }\n                    alt={name}\n                    width=\"185\"\n                    height=\"280\"\n                  />\n                </PhotoWrapper>\n\n                <Thumb>\n                  <Name>{name}</Name>\n                  <Character>Character: {character}</Character>\n                </Thumb>\n              </CastItem>\n            ))}\n          </CastList>\n        </Suspense>\n      )}\n      {fetchError && <p>{fetchError}</p>}\n    </>\n  );\n}\n","import { fetchMovieCredits } from 'api/themoviedb';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovieCredits = () => {\n  const [credits, setCredits] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchError, setFetchError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCredits = async () => {\n      try {\n        setIsLoading(true);\n        const { data, controller } = await fetchMovieCredits(movieId);\n        setCredits(data);\n        return controller;\n      } catch (error) {\n        setFetchError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const abortController = fetchCredits();\n\n    return () => {\n      abortController ?? abortController.abort();\n    };\n  }, [movieId]);\n\n  return { credits, isLoading, fetchError };\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderContainer>\n      <InfinitySpin />\n    </LoaderContainer>\n  );\n}\n"],"names":["BASE_URL","DEF_PARAMS","language","DEF_OPTIONS","method","headers","accept","Authorization","fetchTrendingMovies","url","tmdbProcessQuery","fetchMovieById","id","fetchMovieCredits","fetchMovieReviews","searchMovies","query","params","include_adult","page","controller","AbortController","options","signal","axios","response","status","data","console","error","Error","CastList","styled","CastItem","PhotoWrapper","Photo","Name","Character","Thumb","Cast","useState","credits","setCredits","isLoading","setIsLoading","fetchError","setFetchError","movieId","useParams","useEffect","fetchCredits","message","abortController","abort","useFetchMovieCredits","cast","Loader","length","Suspense","fallback","map","name","profile_path","character","src","placeholder","alt","width","height","LoaderContainer"],"sourceRoot":""}