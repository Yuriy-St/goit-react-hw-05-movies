{"version":3,"file":"static/js/311.3256d599.chunk.js","mappings":"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","sources":["api/themoviedb.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","hooks/useFetchMovie.js","styles/Base.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst DEF_PARAMS = {\n  language: 'en-US',\n};\n\nconst DEF_OPTIONS = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YzIyMmVkMDdhYmIxYzBhZTdkZTZmNjcwNzc1MWYxMCIsInN1YiI6IjY0ZWM5NjI2NDU4MTk5MDBjNmY5N2ZmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.BJKeXT5Tv6NruFgOPeeGmw_mnuiGKgPxsTR813jGw0o',\n  },\n};\n\nexport const fetchTrendingMovies = () => {\n  const url = `${BASE_URL}/trending/movie/day`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieById = id => {\n  const url = `${BASE_URL}/movie/${id}`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieCredits = id => {\n  const url = `${BASE_URL}/movie/${id}/credits`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieReviews = id => {\n  const url = `${BASE_URL}/movie/${id}/reviews`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const searchMovies = query => {\n  const url = `${BASE_URL}/search/movie`;\n  const params = {\n    query,\n    include_adult: 'false',\n    language: 'en-US',\n    page: '1',\n  };\n  return tmdbProcessQuery({ url, params });\n};\n\nconst tmdbProcessQuery = async ({ url, params = {} }) => {\n  const controller = new AbortController();\n\n  const options = {\n    ...DEF_OPTIONS,\n    url,\n    params: { ...DEF_PARAMS, ...params },\n    signal: controller.signal,\n  };\n\n  try {\n    const response = await axios(options);\n    if (response.status !== 200) throw response.data;\n    return { data: response.data, controller };\n  } catch (err) {\n    const { response } = err;\n\n    if (response?.data) {\n      console.error(response.data);\n    } else {\n      console.error(response || err);\n    }\n\n    throw new Error('Something went wrong. Try reload the page.');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderContainer>\n      <InfinitySpin />\n    </LoaderContainer>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const MovieCard = styled.div`\n  display: flex;\n  gap: 2rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #a1a1a1;\n  margin-bottom: 1rem;\n`;\n\nexport const Poster = styled.div`\n  flex-basis: 300px;\n\n  & img {\n    width: auto;\n  }\n`;\n\nexport const InfoCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 2rem;\n  font-weight: 700;\n`;\n\nexport const Score = styled.p``;\n\nexport const Overview = styled.div`\n  & .title {\n    font-size: 1.5rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nexport const GenresSection = styled.div`\n  & p {\n    font-size: 1.25rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n  }\n`;\nexport const Genres = styled.ul`\n  display: flex;\n  gap: 1rem;\n`;\n","import {\n  Genres,\n  GenresSection,\n  InfoCard,\n  MovieCard,\n  MovieTitle,\n  Overview,\n  Poster,\n  Score,\n} from './MovieInfo.styled';\n\nexport default function MovieInfo({\n  movie: { title, overview, poster_path, genres, vote_average },\n}) {\n  const BASE_URL = 'http://image.tmdb.org/t/p/w300';\n\n  return (\n    <MovieCard>\n      <Poster>\n        <img\n          src={`${BASE_URL}${poster_path}`}\n          alt={title}\n          width=\"300\"\n          height=\"450\"\n        />\n      </Poster>\n      <InfoCard>\n        <MovieTitle>{title}</MovieTitle>\n        <Score>User Score: {Math.round(vote_average * 10)}%</Score>\n        <Overview>\n          <p className=\"title\">Overview</p>\n          <p>{overview}</p>\n        </Overview>\n        <GenresSection>\n          <p>Genres</p>\n          <Genres>\n            {genres.map(({ name, id }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </Genres>\n        </GenresSection>\n      </InfoCard>\n    </MovieCard>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const NavList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n\nexport const Info = styled.div`\n  margin-bottom: 1rem;\n  border-bottom: 1px solid #a1a1a1;\n  padding-bottom: 0.5rem;\n\n  & p {\n    margin-bottom: 0.5rem;\n  }\n`;\n\nexport const BackLink = styled(Link)`\n  display: inline-block;\n  margin-bottom: 1rem;\n  padding: 0.25rem 1rem;\n  border: 1px solid black;\n  border-radius: 0.25rem;\n`;\n","import Loader from 'components/Loader/Loader';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { useFetchMovie } from 'hooks/useFetchMovie';\nimport { NavLink, Outlet, useLocation } from 'react-router-dom';\nimport routes from 'routes';\nimport { Container } from 'styles/Base.styled';\nimport { BackLink, Info, NavList } from './MovieDetails.styled';\nimport { Suspense } from 'react';\n\nexport default function MovieDetails() {\n  const location = useLocation();\n  const { movie, isLoading, fetchError } = useFetchMovie();\n  const backLinkRef = location?.state?.from ?? '/';\n\n  return (\n    <Container>\n      <BackLink to={backLinkRef}>â¬… Go back</BackLink>\n      {isLoading && <Loader />}\n      {movie && <MovieInfo movie={movie} />}\n      {fetchError && <div>{fetchError}</div>}\n      <Info>\n        <p>Additional information</p>\n        <NavList>\n          <li>\n            <NavLink to={routes.CAST} state={{ from: backLinkRef }}>\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to={routes.REVIEWS} state={{ from: backLinkRef }}>\n              Reviews\n            </NavLink>\n          </li>\n        </NavList>\n      </Info>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </Container>\n  );\n}\n","import { fetchMovieById } from 'api/themoviedb';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovie = () => {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchError, setFetchError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setIsLoading(true);\n        const { data, controller } = await fetchMovieById(movieId);\n        setMovie(data);\n        return controller;\n      } catch (error) {\n        setFetchError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovie();\n    const abortController = fetchMovie();\n\n    return () => {\n      abortController ?? abortController.abort();\n    };\n  }, [movieId]);\n\n  return { movie, isLoading, fetchError };\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  label: container;\n  width: 78.5rem;\n  margin: 0 auto;\n  padding-right: 1rem;\n  padding-left: 1rem;\n`;\n"],"names":["BASE_URL","DEF_PARAMS","language","DEF_OPTIONS","method","headers","accept","Authorization","fetchTrendingMovies","url","tmdbProcessQuery","fetchMovieById","id","fetchMovieCredits","fetchMovieReviews","searchMovies","query","params","include_adult","page","controller","AbortController","options","signal","axios","response","status","data","console","error","Error","LoaderContainer","styled","Loader","MovieCard","Poster","InfoCard","MovieTitle","Score","Overview","GenresSection","Genres","MovieInfo","movie","title","overview","poster_path","genres","vote_average","src","alt","width","height","Math","round","className","map","name","NavList","Info","BackLink","Link","MovieDetails","location","useLocation","useState","setMovie","isLoading","setIsLoading","fetchError","setFetchError","movieId","useParams","useEffect","fetchMovie","message","abortController","abort","useFetchMovie","backLinkRef","state","from","to","routes","Suspense","fallback","Container"],"sourceRoot":""}