{"version":3,"file":"static/js/959.a55149b3.chunk.js","mappings":"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","sources":["api/themoviedb.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MovieList/MoviesList.styled.jsx","components/MovieList/MoviesList.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","components/Movies/Movies.jsx","hooks/useSearchMovies.js","styles/Base.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst DEF_PARAMS = {\n  language: 'en-US',\n};\n\nconst DEF_OPTIONS = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4YzIyMmVkMDdhYmIxYzBhZTdkZTZmNjcwNzc1MWYxMCIsInN1YiI6IjY0ZWM5NjI2NDU4MTk5MDBjNmY5N2ZmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.BJKeXT5Tv6NruFgOPeeGmw_mnuiGKgPxsTR813jGw0o',\n  },\n};\n\nexport const fetchTrendingMovies = () => {\n  const url = `${BASE_URL}/trending/movie/day`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieById = id => {\n  const url = `${BASE_URL}/movie/${id}`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieCredits = id => {\n  const url = `${BASE_URL}/movie/${id}/credits`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const fetchMovieReviews = id => {\n  const url = `${BASE_URL}/movie/${id}/reviews`;\n  return tmdbProcessQuery({ url });\n};\n\nexport const searchMovies = query => {\n  const url = `${BASE_URL}/search/movie`;\n  const params = {\n    query,\n    include_adult: 'false',\n    language: 'en-US',\n    page: '1',\n  };\n  return tmdbProcessQuery({ url, params });\n};\n\nconst tmdbProcessQuery = async ({ url, params = {} }) => {\n  const controller = new AbortController();\n\n  const options = {\n    ...DEF_OPTIONS,\n    url,\n    params: { ...DEF_PARAMS, ...params },\n    signal: controller.signal,\n  };\n\n  try {\n    const response = await axios(options);\n    if (response.status !== 200) throw response.data;\n    return { data: response.data, controller };\n  } catch (err) {\n    const { response } = err;\n\n    if (response?.data) {\n      console.error(response.data);\n    } else {\n      console.error(response || err);\n    }\n\n    throw new Error('Something went wrong. Try reload the page.');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { InfinitySpin } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderContainer>\n      <InfinitySpin />\n    </LoaderContainer>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const MoviesListWraper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MoviesListWraper } from './MoviesList.styled';\nimport routes from 'routes';\n\nexport default function MoviesList({ movies }) {\n  const location = useLocation();\n  const { pathname } = location;\n  const currentPath = pathname !== '/movies' ? `${routes.MOVIES}/` : '';\n  return (\n    <MoviesListWraper>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`${currentPath}${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </MoviesListWraper>\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 0.25rem;\n`;\n\nexport const Input = styled.input``;\n\nexport const Button = styled.button``;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Button, Form, Input } from './SearchForm.styled';\n\nexport default function SearchForm({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleOnChange = ({ target }) => {\n    setQuery(target.value);\n  };\n\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    onSubmit(query);\n  };\n\n  return (\n    <Form onSubmit={handleOnSubmit}>\n      <Input type=\"text\" value={query} onChange={handleOnChange} />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MovieList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { useSearchMoveis } from 'hooks/useSearchMovies';\nimport { Suspense } from 'react';\nimport { Container } from 'styles/Base.styled';\n\nexport default function Movies() {\n  const { movies, isLoading, fetchError, onHandleSubmit } = useSearchMoveis();\n\n  const hasMovies = movies?.length > 0;\n  const noResults = !isLoading && !hasMovies && !fetchError;\n\n  return (\n    <Container>\n      <Suspense fallback={<div>Loading...</div>}>\n        <SearchForm onSubmit={onHandleSubmit} />\n        {isLoading && <Loader />}\n        {fetchError && <p>{fetchError}</p>}\n        {hasMovies && <MoviesList movies={movies} />}\n        {noResults && <p>Nothing found ðŸ˜•</p>}\n      </Suspense>\n    </Container>\n  );\n}\n","import { searchMovies } from 'api/themoviedb';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const useSearchMoveis = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchError, setFetchError] = useState(false);\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) return;\n\n    const fetchMovies = async () => {\n      try {\n        setIsLoading(true);\n        const { data, controller } = await searchMovies(query);\n        setMovies(data.results);\n        return controller;\n      } catch (error) {\n        setFetchError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const abortController = fetchMovies();\n\n    return () => {\n      abortController ?? abortController.abort();\n    };\n  }, [searchParams]);\n\n  const onHandleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  return { movies, isLoading, fetchError, onHandleSubmit };\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  label: container;\n  width: 78.5rem;\n  margin: 0 auto;\n  padding-right: 1rem;\n  padding-left: 1rem;\n`;\n"],"names":["BASE_URL","DEF_PARAMS","language","DEF_OPTIONS","method","headers","accept","Authorization","fetchTrendingMovies","url","tmdbProcessQuery","fetchMovieById","id","fetchMovieCredits","fetchMovieReviews","searchMovies","query","params","include_adult","page","controller","AbortController","options","signal","axios","response","status","data","console","error","Error","LoaderContainer","styled","Loader","MoviesListWraper","MoviesList","movies","location","useLocation","currentPath","pathname","routes","map","title","to","state","from","Form","Input","Button","SearchForm","onSubmit","useState","setQuery","event","preventDefault","type","value","onChange","target","Movies","useSearchParams","searchParams","setSearchParams","setMovies","isLoading","setIsLoading","fetchError","setFetchError","useEffect","get","fetchMovies","results","message","abortController","abort","onHandleSubmit","useSearchMoveis","hasMovies","length","noResults","Suspense","fallback","Container"],"sourceRoot":""}